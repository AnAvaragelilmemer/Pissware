
    repeat task.wait() until game:IsLoaded() and game.ContentProvider.RequestQueueSize == 0;
local time = os.time()

if getgenv().isloaded then
    game.StarterGui:SetCore("SendNotification", {
Title = "Notification",
Text = "Impact is already loaded!",
Duration = 5,
})
return
end
getgenv().isloaded = true
local loadtime = os.time()
local lplr = game:GetService("Players").LocalPlayer
local chlplr = lplr.Character.Humanoid
local name = lplr.Name
local dname = lplr.DisplayName
local userid = lplr.UserId 
local version = "V3.0.0"
local light = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local NetworkClient = game:GetService("NetworkClient")
local xray = {}
local ambient
getgenv().ambientcolor = Color3.fromRGB(138,43,226)
RunService.Stepped:Connect(function()
        if ambient then
        light.Ambient = getgenv().ambientcolor
        else
            light.Ambient = Color3.fromRGB(0,0,0)
        end
end)
local noclip 
game:GetService("RunService").Stepped:Connect(function()
    if noclip then
        for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
            if v and v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end
end)

getgenv().run = nil
function run()
while getgenv().run do
    wait()
    lplr.Character.Humanoid:MoveTo(lplr.Character.HumanoidRootPart.Position+workspace.Camera.CFrame.lookVector*100)
    if getgenv().run == false then
        lplr.Character.Humanoid:MoveTo(lplr.Character.HumanoidRootPart.Position)
    end
end
end

            
getgenv().fps = nil;
function fpss()
if getgenv().fps then
    setfpscap(999)
    else
        setfpscap(60)
end
end
getgenv().headless = nil
function headless()
if getgenv().headless then
    lplr.Character.Head.Transparency = 1
   lplr.Character.Head.face.Transparency = 1
  else
      lplr.Character.Head.Transparency = 0 
      lplr.Character.Head.face.Transparency = 0
end
end
getgenv().norender = nil
function norender()
if getgenv().norender then
    RunService:Set3dRenderingEnabled(false)
    else
            RunService:Set3dRenderingEnabled(true)
end
end
	getgenv().jetpack = nil; 
	function jetpack() 
	        game:GetService("UserInputService").JumpRequest:connect(function()
	    if getgenv().jetpack then
	        		game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
end
end)
end

getgenv().spinbot = nil;
getgenv().spinspeed = math.rad(50)
function spin()
while getgenv().spinbot do
task.wait()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, getgenv().spinspeed, 0)
end
end

getgenv().antiafk = nil;
function antiafk() 
    while task.wait() and getgenv().antiafk do
        if true then
            lplr.Idled:connect(function()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
        end
    end
end


getgenv().spamchat = nil;
getgenv().spamchatmessage = nil
function spamchat()
while getgenv().spamchatmessage do
    wait(1)
    local chat = getgenv().spamchatmessage or "impact on top" 
    local towhom = "All"
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(chat, towhom)
        wait(1)
    end
end

local espLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AnAvaragelilmemer/scripts/main/esp/main.lua"))()
local lib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt")()
espLibrary.options.chams = false
	espLibrary.options.boxes = false
	 espLibrary.options.healthText = false
	  espLibrary.options.distance = false
	  espLibrary.options.healthBars = false
espLibrary.options.names = false
espLibrary.options.distance = false
 espLibrary.options.outOfViewArrows = false
                espLibrary.options.outOfViewArrowsOutline = false
local win = lib:Window("Impact "..version,Color3.fromRGB(138,43,226), Enum.KeyCode.RightControl)

local movement = win:Tab("movement")
local render = win:Tab("render")
local misc = win:Tab("misc")

movement:Toggle("Spinbot",false, function(v) 
getgenv().spinbot = v
spin()
end)

movement:Textbox("Spinbot speed",true, function(v)
getgenv().spinspeed = math.rad(v)
end)

movement:Textbox("Speed",true, function(v)
    TargetWalkspeed = v
end)

movement:Toggle("Phase",false, function(v) 
noclip = v
end)

movement:Toggle("Jetpack",false, function(v) 
getgenv().jetpack = v 
jetpack() 
end)

movement:Toggle("AlwaysMove",false, function(v) 
    getgenv().run = v
    run()
 end)

render:Toggle("Ambient",false, function(v) 
    ambient = v
 end)

render:Colorpicker("Ambient color",Color3.fromRGB(0,255,0),function(v) 
    getgenv().ambientcolor = v
 end)

render:Toggle("NoRender",false, function(v) 
    getgenv().norender = v
    norender()
 end)

render:Toggle("Enable ESP",false, function(v) 
    espLibrary.options.enabled = v
	espLibrary.options.chams = false
	espLibrary.options.boxes = false
	 espLibrary.options.healthText = false
 end)

render:Toggle("HealthBar",false, function(v) 
    espLibrary.options.healthBars = v
 end)

render:Colorpicker("HealthBar color",Color3.fromRGB(255,255,255),function(v) 
    espLibrary.options.healthBarsColor = v
 end)

render:Toggle("NameTags",false, function(v) 
     espLibrary.options.names = v
 end)

render:Colorpicker("NameTags color",Color3.fromRGB(255,255,255),function(v) 
     espLibrary.options.nameColor = v
 end)


render:Toggle("PlayerESP",false, function(v) 
    espLibrary.options.boxFill = v
end)

render:Colorpicker("PlayerESP color",Color3.fromRGB(255,255,255),function(v) 
    espLibrary.options.boxFillColor = v
 end)


render:Toggle("Tracers",false, function(v) 
   espLibrary.options.tracers = v
end)

render:Colorpicker("Tracer color",Color3.fromRGB(255,255,255),function(v) 
     espLibrary.options.tracerColor = v
 end)


render:Toggle("Distance",false, function(v) 
     espLibrary.options.distance = v
end)

render:Colorpicker("Distance color",Color3.fromRGB(255,255,255),function(v) 
    espLibrary.options.distanceColor = v
end)

render:Toggle("Filled Arrows",false, function(v) 
      espLibrary.options.outOfViewArrows = v
end)

render:Colorpicker("Filled Arrow color",Color3.fromRGB(255,255,255),function(v) 
    espLibrary.options.outOfViewArrowsColor = v
 end)

render:Toggle("Arrows",false, function(v) 
      espLibrary.options.outOfViewArrowsOutline = v
end)

render:Colorpicker("Arrow color",Color3.fromRGB(255,255,255),function(v) 
     espLibrary.options.outOfViewArrowsOutlineColor = v
 end)

render:Label("ESP Global settings")

render:Toggle("Visible check",false, function(v)
espLibrary.options.visibleOnly = v
end)

render:Toggle("Team check",false, function(v)
espLibrary.options.teamCheck = v
end)

render:Toggle("Limit distance",false, function(v)
espLibrary.options.limitDistance = v
end)
render:Slider("Max Distance",0,2000,1000, function(v)
 espLibrary.options.maxDistance = v
end)


game:GetService("RunService").RenderStepped:Connect(function() 
pcall(function() 
 if game.Players.LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then 
game.Players.LocalPlayer.Character:TranslateBy(game.Players.LocalPlayer.Character.Humanoid.MoveDirection * TargetWalkspeed/50) 
 end 
 end) 
 end)

espLibrary:Load()
lib:Notification("Notification", "Impact "..version.." Loaded in "..os.time()-time.." Seconds", "Ok!")
